# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.3-stretch-node-browsers
      - image: circleci/mysql:5.7
        environment:
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_DATABASE: crabe
          MYSQL_USER: homestead
          MYSQL_PASSWORD: secret
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:3

    steps:
      - checkout

      - run: sudo apt update && sudo apt install zlib1g-dev
      - run: sudo docker-php-ext-install zip pdo_mysql

      # Download and cache dependencies

      # composer cache
      - restore_cache:
          keys:
          # "composer.lock" can be used if it is committed to the repo
          - v1-dependencies-{{ checksum "composer.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor

      # node cache

      - restore_cache:
          keys:
            - node-v4-{{ checksum "package.json" }}
            - node-v4-
      - run: npm install
      - save_cache:
          key: node-v4-{{ checksum "package.json" }}
          paths:
            - node_modules
            - ~/.yarn

      # prepare the database
      # - run: touch storage/testing.sqlite
      - run: export $(cat .env.testing) && php artisan migrate --force --seed -v
      - run: export $(cat .env.testing) && php artisan migrate:refresh --force --seed -v

  build-vuejs:
    steps:
      - run: npm run dev

  tests:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.3-stretch-node-browsers
      - image: circleci/mysql:5.7
        environment:
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_DATABASE: crabe
          MYSQL_USER: homestead
          MYSQL_PASSWORD: secret
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:3

    steps:
      - checkout

      - run: sudo apt update && sudo apt install zlib1g-dev
      - run: sudo docker-php-ext-install zip pdo_mysql

      # Download and cache dependencies

      # composer cache
      - restore_cache:
          keys:
          # "composer.lock" can be used if it is committed to the repo
          - v1-dependencies-{{ checksum "composer.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor

      # node cache

      - restore_cache:
          keys:
            - node-v4-{{ checksum "package.json" }}
            - node-v4-
      - run: npm install
      - save_cache:
          key: node-v4-{{ checksum "package.json" }}
          paths:
            - node_modules
            - ~/.yarn

      # prepare the database
      # - run: touch storage/testing.sqlite
      - run: export $(cat .env.testing) && php artisan migrate --force --seed -v
      - run: export $(cat .env.testing) && php artisan migrate:refresh --force --seed -v

      # run tests with phpunit or codecept
      - run: export $(cat .env.testing) && ./vendor/bin/phpunit
      # this example uses codecept but you're not limited to it
      # - run: ./vendor/bin/codecept build
      # - run: ./vendor/bin/codecept run --xml result.xml
      - store_test_results:
          path: tests/_output
      - store_artifacts:
          path: tests/_output

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - tests
